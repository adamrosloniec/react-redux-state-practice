{"version":3,"sources":["app/movies/components/MoviesContainer.js","App.js","serviceWorker.js","app/actors/duck/types.js","app/actors/duck/reducers.js","app/actors/duck/index.js","app/movies/duck/types.js","app/movies/duck/reducers.js","app/movies/duck/actions.js","app/movies/duck/index.js","reducers.js","store.js","index.js"],"names":["connect","state","movies","props","react_default","a","createElement","list","map","movie","key","App","className","components_MoviesContainer","Component","Boolean","window","location","hostname","match","types","INITIAL_STATE","listName","actorsReducer","arguments","length","undefined","action","type","Object","objectSpread","concat","toConsumableArray","item","duck_types","duck_actions","moviesReducer","rootReducer","combineReducers","actors","store","createStore","composeWithDevTools","dispatch","movieActions","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAiBeA,cAJS,SAAAC,GAAK,MAAK,CAChCC,OAAQD,EAAMC,SAKd,GAFaF,CAdS,SAAAG,GACtB,OACEC,EAAAC,EAAAC,cAAA,UACGH,EAAMD,OAAOK,KAAKC,IAAI,SAAAC,GAAK,OAC1BL,EAAAC,EAAAC,cAAA,MAAII,IAAKD,GAAQA,QCOVE,mLARX,OACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACO,EAAD,cAJUC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4FCfSC,EAHG,YAGHA,EAFM,eCCfC,EAAgB,CACpBC,SAAU,cACVf,KAAM,CAAC,MAAO,QAAS,SCAVgB,EDGO,WAAmC,IAAlCtB,EAAkCuB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1BH,EAAeM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACvD,OAAQC,EAAOC,MACb,KAAKR,EACH,OAAOS,OAAAC,EAAA,EAAAD,CAAA,GACF5B,EADL,CAEEM,KAAI,GAAAwB,OAAAF,OAAAG,EAAA,EAAAH,CAAM5B,EAAMM,MAAZ,CAAkBoB,EAAOM,SAEjC,KAAKb,EACH,OAAOS,OAAAC,EAAA,EAAAD,CAAA,GAAK5B,EAAZ,CAAmBM,KAAM,KAC3B,QACE,OAAON,IEdEiC,EAHG,YAGHA,EAFM,eCCfb,EAAgB,CACpBC,SAAU,mBACVf,KAAM,CAAC,QAAS,QAAS,WCQZ4B,EAVH,SAAAF,GAAI,MAAK,CACnBL,KAAMR,EACNa,SCAaG,EFGO,WAAmC,IAAlCnC,EAAkCuB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1BH,EAAeM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACvD,OAAQC,EAAOC,MACb,KAAKR,EACH,OAAOS,OAAAC,EAAA,EAAAD,CAAA,GACF5B,EADL,CAEEM,KAAI,GAAAwB,OAAAF,OAAAG,EAAA,EAAAH,CAAM5B,EAAMM,MAAZ,CAAkBoB,EAAOM,SAEjC,KAAKb,EACH,OAAOS,OAAAC,EAAA,EAAAD,CAAA,GAAK5B,EAAZ,CAAmBM,KAAM,KAC3B,QACE,OAAON,IGREoC,EALKC,0BAAgB,CAClCC,OAAQhB,EACRrB,OAAQkC,ICDJI,EAAQC,sBAAYJ,EAAaK,iCACvCF,EAAMG,SAASC,EAAiB,YAEjBJ,QCAfK,IAASC,OACP1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAUP,MAAOA,GACfpC,EAAAC,EAAAC,cAAC0C,EAAD,OAEFC,SAASC,eAAe,SVqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0e3eaee1.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\n\nconst MoviesContainer = props => {\n  return (\n    <ul>\n      {props.movies.list.map(movie => (\n        <li key={movie}>{movie}</li>\n      ))}\n    </ul>\n  )\n}\n\nconst mapStateToProps = state => ({\n  movies: state.movies\n})\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(MoviesContainer)\n","import React, { Component } from 'react'\nimport './App.css'\nimport MoviesContainer from './app/movies/components/MoviesContainer'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MoviesContainer />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const ADD_ACTOR = 'ADD_ACTOR'\nconst RESET_ACTORS = 'RESET_ACTORS'\n\nexport default {\n  ADD_ACTOR,\n  RESET_ACTORS\n}\n","import types from './types'\n\nconst INITIAL_STATE = {\n  listName: 'Best actors',\n  list: ['Tom', 'Julia', 'John']\n}\n\nconst actorsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case types.ADD_ACTOR:\n      return {\n        ...state,\n        list: [...state.list, action.item]\n      }\n    case types.RESET_ACTORS:\n      return { ...state, list: [] }\n    default:\n      return state\n  }\n}\n\nexport default actorsReducer\n","import actorsReducer from './reducers'\nexport { default as actorTypes } from './types'\nexport { default as actorActions } from './actions'\n\nexport default actorsReducer\n","const ADD_MOVIE = 'ADD_MOVIE'\nconst RESET_MOVIES = 'RESET_MOVIES'\n\nexport default {\n  ADD_MOVIE,\n  RESET_MOVIES\n}\n","import types from './types'\n\nconst INITIAL_STATE = {\n  listName: 'Favorites movies',\n  list: ['Rocky', 'Rambo', 'Matrix']\n}\n\nconst moviesReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case types.ADD_MOVIE:\n      return {\n        ...state,\n        list: [...state.list, action.item]\n      }\n    case types.RESET_MOVIES:\n      return { ...state, list: [] }\n    default:\n      return state\n  }\n}\n\nexport default moviesReducer\n","import types from './types'\n\nconst add = item => ({\n  type: types.ADD_MOVIE,\n  item\n})\n\nconst reset = item => ({\n  type: types.RESET_MOVIES,\n  item\n})\n\nexport default {\n  add,\n  reset\n}\n","import moviesReducer from './reducers'\nexport { default as movieTypes } from './types'\nexport { default as movieActions } from './actions'\n\nexport default moviesReducer\n","import { combineReducers } from 'redux'\nimport actorsReducer from './app/actors/duck'\nimport moviesReducer from './app/movies/duck'\n\nconst rootReducer = combineReducers({\n  actors: actorsReducer,\n  movies: moviesReducer\n})\n\nexport default rootReducer\n","import { createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducers'\nimport { movieActions } from './app/movies/duck'\n\nconst store = createStore(rootReducer, composeWithDevTools())\nstore.dispatch(movieActions.add('Rambo X'))\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}